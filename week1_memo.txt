// C언어와 C++차이점 - C에서는 객체 사용 불가, C++에서는 객체 사용 가능

/*
#include <stdio.h>
{
  int x; 
  scanf("%d", &x);
  printf("%d", x);
  
  return 0;
} 
이렇게 짧을 경우에는 괜찮음. 그러나 코드가 길어지면 유지보수가 어려워짐
학생이 백명이라고 할 경우, 각자의 입력을 모두 받아야 함 -> 반복문만 100번 돌아감
출력도 100번을 하게 됨 -> 이 역시도 반복문만 100번 돌아감
여기서 과목이 계속 추가된다면? == 코드는 계속 복잡해지기만 하는거임.
*/ 

/*위를 유지보수 할 경우

struct _student {
  int x, y, z;
};

int main(void){
  struct _student x[100];
}
구조체를 쓰게되는데, 이것 역시 늘어나면 유지보수가 편리하지 않음
입력받는 함수도 따로 만들게 됨 (C언어의 경우)
*/

//일반적으로 cpp를 소스 파일 끝에 작성
class student{
  int x, y, z;
  void InputStudent(Student *str);
}; //캡슐화, 필요한 정보를 안에 묶어서 저장 -> 밖에서 접근 불가하게 만들 수 있음

#ifdef FILENAME_H
#define FILENAME_H

파일 영역
: 함수 정의에 속하지 않은 선언, 클래스 정의, 네임스페이스
: 네임스페이스 - 영역 정보를 사용해서 네임 스페이스 안의 개체에 접근 ex) std::cout
: 상도동:홍길동 과 강남:홍길동은 다른데 네임스페이스가 달라서 그래

지역 영역 : 블록 내에서 선언된 영역
클래스 영역 : 클래스 내에서 선언된 영역 -> 이 안에 속한 애들 : 클래스 안에 속했다~ 라고 언급

세미콜론으로 끝나는게 하나의 명령문
new : 생성, delete 지움 빼고는 C의 연산자와 동일
C++의 입출력 : 시프트 연산자 - 표준 입출력(프린트f, scanf 가 얘네로 쓰인다고 생각하면 됨)
C와 C++의 중요한 차이점 : 연산자 다중화! - 똑같은 연산자가 서로 다른 연산이 가능함
 ex) + 연산자가 A도 할 수 있고 B도 할 수 있음

상수 변수: 선언 시 내용이 고정되어 있음

