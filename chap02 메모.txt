I. 객체의 정의
: 변수와 기능을 모두 담고 있는 하나의 모듈
: 변수를 작동시킨다

II. 객체의 성격
: 객체는 상태를 갖는다(state 단어를 왜 쓸까)
: 객체는 잘 정의된 행동양식을 갖는다(객체 내부 함수일듯)
: 객체는 각각의 고유한 특성을 갖는다(객체마다 기능이 다르게 부여될 수 있다는 뜻 같네요)
   -> 객체마다 독특한 정체성이 요구된다
   -> 객체의 정체성의 종류 
	- 메인메모리의 객체 이름
	- 객체의 전체 수명을 위한 영구적인 아이디 
	- 지역적vs전역적

III. 객체의 예시
: 정체성 - 식별자를 의미(객체 이름-객체를 구분할 수 있는 무언가를 식별자라고 말하고 있는 듯 함)
: 상태 - 변수들
: 기능성 - 함수들

IV. 물리적 객체와 논리적 객체 비교
1. 물리적 객체: 물리적이고 가시적인 존재성을 나타낸다(그냥 객체를 정의한 것)
2. 논리적 객체: 상호작용하는 상태를 저장한다(그 객체가 어떤 기능을 하는 것)
3. 예를 들자면
ex) 공항에서
 - 물리적 객체: 비행기, 파일럿, 승무원, 공항
 - 논리적 객체: 비행기 운항, 비행기 표

ex) 병원에서
 - 물리적 객체: 의사, 간호사, 치료실, 기기
 - 논리적 객체: 치료, 의학 검사, 약 제조

ex) 휴대폰(통신사) 회사에서
 - 물리적 객체: 휴대폰 대리점, 가입자
 - 논리적 객체: 전화송수신, 요금 지불

V. 객체의 규칙 설계
캡슐화: 연관된 것들을 그룹지어 하나의 캡슐에 넣음
(왜 캡슐이라는 단어를 쓰는지 n년동안 고민해봤지만 그냥 캡슐안에 저장한다 == 외부에서 그것을 망가트릴 수 없다 + 관련된 것들을 하나의 공간에 저장할 수 있다의 의미)

정보를 숨기는 것(지키는 것):
내부의 정보를 외부에서는 보이지 않게끔 만든다
즉, 변수(함수들)을 가리는 것

