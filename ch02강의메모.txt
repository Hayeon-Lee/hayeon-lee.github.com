소프트웨어 crisis
: 높은 품질의 소프트웨어을 주어진 시간안에 만들기 어렵다
: 40년 된 문제일 정도로 오래 됨

생산성의 문제 : 개발자가 많아지면 생산성이 좋다? 아님! 많은 인원을 투입해도 팀 전체 생산성이 인원만큼 비례하지 않다.

품질의 문제

소프트웨어 crisis 원인
1) 복잡도의 증가
1. 많은 기능
2. 실행환경이 이질적임(운영체제가 다른 시스템끼리 클라이언트 서버에 연결, 외부 서비스를 연결해 쓴다던지...)
3. 복수개의 티어가 연결되어있는 컴퓨터들이 점점 늘어남 (ex: 지점 컴, 본부 컴, 개인 컴 등)
4. 사물인터넷서비스를 위해 하드웨어 연결 필요
5. 머신러닝을 이용해 지능형 소프트웨어를 제작해야함
== 복잡도가 계속해서 올라감

2) 비용 증가
1. 개발비용.
2. 유지비용.
3. 작동비용.
4. 필요한 환경

--> 객체지향 방식은 이런 문제를 해결할 툴이 많이 있다. 그러므로 객체지향 방식은 소프트웨어에서 가장 많이 사용하는 패러다임이 되었음

소프트웨어 위기극복
1) 개발 방식을 좀 바꿔야함. 절차를 객체지향으로.
2) 한번 개발한 소프트웨어 라이브러리 디자인 패턴들을 재사용할 수 있어야 함.
3) 유지보수가 좋은 소프트웨어를 만들어야 함. <- 객체지향 패러다임 안에 포함되어 있음

전통적인 소프트웨어 시각
1. 절차지향 프로그래밍 C
- 여러 변수들 + 함수들 = 프로그램 

2. 특징
- 줄지어 서있는 듯한 
- 서로 관련있는 변수와 함수가 멀리멀리 떨어져있음 == 스파게티 코드의 특징

3-1 변수와 함수들이 전혀 상관없는 것처럼 다 멀리 멀리 떨어져있다...

3-2 전역변수: 만약 공유하는 함수들 중 이 전역변수에 이상한 값을 전달한다면? 막을 방법이 없다... 왜냐면 전역변수기 때문에 누구나 읽고 쓸 수 있기 때문임. 
-> 변수의 무결성을 보장할 수 없음
== 자바에는 전역변수가 없음

3-3. 관련된 요소들끼리의 결합도 상승
D2를 f1, f2, f4가 씀 -> 그리고 함수들이 또 다른 애들이랑 연결됨 -> 결합도가 높음 -> 만약 D2를 D7으로 변경하면 연결된 모든 것을 다 고쳐야함... -> 유지보수 측면에서 불편.
결합도가 높다는 것은 좋은게 아님. 모듈화를 거쳐야 함. 모듈화 안하면 하나 고치면 남은 것 다 고쳐야함 .... ㅈㄴ기찮고 복잡함... 이거를 스파게티 코드라고 함... 이렇게 코딩하면 안됨...

소프트웨어를 객체 지향 시각으로 보자
1. 객체+객체 = 프로그램
: 한 프로그램은 객체들로만 구성된다
2. 오브젝트를 상세히 들여다보면 몇 개 안되는 변수들과 관련되어있는 함수들만 잇음 == 관련있는 것들끼리 모여있는 것임
-> methods == member functions : 관련된 메쏘드들 끼리 합쳐져서 조각나있기 때문에 모듈화 되어 있음

3. 전자상거래 시스템
- 손님 객체, 주문 객체, 상품 객체 
- 고객정보 처리 관련한 메쏘드들끼리만 모여있음, 주문 관련한 메쏘드들끼리 모여있음, 상품 관리 관련한 메쏘드들끼리만 모여있음
-> 이렇게 되어있으니 전역변수X, 객체와 객체 사이의 결합이 없음.
